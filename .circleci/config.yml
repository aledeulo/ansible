version: 2.1

aws_docker_image: &aws_docker_image
  docker:
      - image: amazon/aws-cli

commands:
  
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name services-stack-${CIRCLE_WORKFLOW_ID:0:5} && \
            echo "CloudFormation stack cleaning has being triggered. Please check!" && \
            aws cloudformation delete-stack --stack-name bucket-stack-${CIRCLE_WORKFLOW_ID:0:5} && \
            echo "CloudFormation clean s3 stack triggered"  && \
            aws cloudformation delete-stack --stack-name cloudfront-${CIRCLE_WORKFLOW_ID:0:5} && \
            echo "CloudFormation clean CloudFront stack"

jobs:

  create_aws_s3_buckets:
    <<: *aws_docker_image
    steps:
      - checkout
      - run:
          name: Deploy S3 bucket
          command: |
              aws cloudformation deploy \
                    --template-file ./deploy_cloud_formation/cf_templates/bucket.yml \
                    --stack-name bucket-stack-${CIRCLE_WORKFLOW_ID:0:5} \
                    --parameter-overrides MyBucketName="my-bucket-${CIRCLE_WORKFLOW_ID}" \
                    --region us-east-1
      - run:
          name: Copy files
          command: |
              aws s3 sync deploy_cloud_formation/cf_templates/index.html s3://"my-bucket-${CIRCLE_WORKFLOW_ID}" --delete


  
  create_aws_instance:
    working_directory: ~/project_${CIRCLE_WORKFLOW_ID}
    <<: *aws_docker_image
    steps:
      - checkout      
      - run: 
          name: Create CloudFormation services
          command: |
             ls -l && \
             aws cloudformation deploy \
                --template-file ./deploy_cloud_formation/cf_templates/resources.yml \
                --stack-name services-stack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1
      - run: | 
          echo "[ec2-instances]" > inventory && \
          aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory 
      - run: |
          yum install -y tar gzip

      - attach_workspace:
          at: ~/project_${CIRCLE_WORKFLOW_ID}

      - persist_to_workspace:
          root: ~/project_${CIRCLE_WORKFLOW_ID}
          paths:
            - ./

  create_cloudfront_service:
    <<: *aws_docker_image
    steps:
      - checkout
      - run:
          name: Deploy CloudFront to change router
          command: |
              aws cloudformation deploy \
              --template-file ./deploy_cloud_formation/cf_templates/cloudfront.yml \
              --stack-name cloudfront-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides PipelineID="my-cf-dist-${CIRCLE_WORKFLOW_ID}"

  run_ansible_playbooks:
    working_directory: ~/project_${CIRCLE_WORKFLOW_ID}
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ea:43:42:b3:40:5f:88:9b:e5:a5:53:6a:9b:d6:2b:64"]
      - attach_workspace:
          at: ~/project_${CIRCLE_WORKFLOW_ID}
      - run: 
          name: Install dependencies
          command: apk add --update ansible
      - run:
          name: Run ansible playbook
          command: |
            ls -l && ansible-playbook -i inventory main-remote.yml
      - destroy_environment

  smoke_test:
    <<: *aws_docker_image
    steps:
      - run:
          name: smoke test
          command: return 1
      - destroy_environment 

workflows:
  deploy-aws-resources-workflow:
    jobs:
      - create_aws_instance
      # - create_aws_s3_buckets
      # - create_cloudfront_service:
      #     requires:
      #       - create_aws_s3_buckets
      # - create_aws_instance:
      #     requires:
      #       - create_aws_s3_buckets